To get Tables (Order and Return)
Use https://github.com/mrityunjay2805/sql_practice/blob/main/Superstore_orders.xls
Use https://github.com/mrityunjay2805/sql_practice/blob/main/returns.xls
Order_id is the foreign key


1) write a sql to get all the orders where customers name has "a" as second character and "d" as fourth character

select * from Orders
where customer_name like '_a%' and customer_name like '___d%'

OR w can
select * from Orders where customer_name like '_a_d%'


2) write a sql to get all the orders placed in the month of dec 2020

Select * from Orders where DATEPART(YEAR, order_date) = '2020' and DATEPART(MONTH, order_date) = '12'

Or we can
Select * from Orders where order_date between '2020-12-01' and '2020-12-31'


3) write a query to get all the orders where ship_mode is neither in 'Standard Class' nor in 'First Class' and ship_date is
after nov 2020

select * from Orders where ship_mode not in ('Standard Class', 'First Class') and ship_date > '2020-11-30'


4) write a query to get all the orders where customer name neither start with "A" and nor ends with "n"

Select * from Orders where customer_name not like 'A%n'


5) write a query to get all the orders where profit is negative

select * from Orders where profit < 0


6) write a query to get all the orders where either quantity is less than 3 or profit is 0

select * from Orders where quantity < 3 or profit = 0


7) your manager handles the sales for South region and he wants you to create a report of all the orders in his region 
here some discount is provided to the customers

select * from Orders where region = 'South' and discount > 0


8) write a query to find top 5 orders with highest sales in furniture category 

select top 5 * from Orders where category = 'Furniture' order by sales desc


9)write a query to find all the records in technology and furniture category for the orders placed in the year 2020 only

select * from Orders where category in ('Furniture', 'Technology') 
and order_date between '2020-01-01' and '2020-12-31'


OR we can 
select * from Orders where category in ('Furniture', 'Technology')
and datepart(YEAR, order_date) = '2020'

10) write a query to find all the orders where order date is in year 2020 but ship date is in 2021

select * from Orders where order_date between '2020-01-01' and '2020-12-31'
and ship_date between '2021-01-01' and '2021-12-31'

Or we can
select * from Orders where DATEPART(YEAR, order_date) = '2020' and
DATEPART(YEAR, ship_date) = '2021'


11) write a update statement to update city as null for order ids :  CA-2020-161389 , US-2021-156909

update orders set city=null where order_id in ('CA-2020-161389','US-2021-156909')


12) write a query to find orders where city is null

select * from orders where city is null


13) write a query to get total profit, first order date and latest order date for each category

select sum(sales) as Total_profit, min(order_date) as first_order_date, max(order_date) as latest_ordr_date
from Orders group by category


14) write a query to find sub-categories where average profit is more than the half of the max profit 
in that sub-category

select sub_category from Orders group by sub_category having avg(profit) > 0.5 * Max(profit)


15) write a query to find total number of products in each category

select category,count(distinct product_id) as no_of_prod from Orders group by category


16) write a query to find top 5 sub categories in west region by total quantity sold

select top 5  sub_category, sum(quantity) as total_quantity
from Orders
where region='West'
group by sub_category
order by total_quantity desc


17) write a query to find total sales for each region and ship mode combination for orders in year 2020

select region,ship_mode ,sum(sales) as total_sales
from Orders
where order_date between '2020-01-01' and '2020-12-31'
group by region,ship_mode


18) write a query to get region wise count of return orders

select region, count(distinct o.order_id) as no_of_return_order
from Orders o inner join returns$ r on o.order_id = r.[Order Id]
group by region


19) write a query to get category wise sales of orders that were not returned

select category, sum(sales) as total_sales
from Orders o left join returns$ r on o.order_id = r.[Order Id]
where r.[Order Id] is null
group by category


20) write a query to print sub categories where we have all 3 kinds of returns (others,bad quality,wrong items)

select o.sub_category
from Orders o inner join returns$ r on o.order_id = r.[Order Id]
group by o.sub_category
having count(distinct r.[Return Reason]) = 3



21) write a query to find cities where not even a single order was returned.

select distinct city
from Orders o
left join returns$ r on o.order_id=r.[Order Id]
group by city
having count(r.[Order Id])=0


22) write a query to find top 3 subcategories by sales of returned orders in east region

select top 3 sub_category, sum(sales) as sales_from_returned_orders
from Orders o inner join returns$ r 
on o.order_id = r.[Order Id]
where region = 'East'
group by sub_category
order by sales_from_returned_orders desc


23) write a query to find subcategories who never had any return orders in the month of november (irrespective of years)

select sub_category from
Orders o left join returns$ r on o.order_id = r.[Order Id]
where DATEPART(MONTH, order_date) = 11
group by sub_category 
having count(r.[Order Id]) = 0


24) orders table can have multiple rows for a particular order_id when customers buys more than 1 product in an order.
write a query to find order ids where there is only 1 product bought by the customer.

select order_id from Orders
group by order_id
having COUNT(*) = 1


25) write a query to get number of business days between order_date and ship_date (exclude weekends). 
Assume that all order date and ship date are on weekdays only


select  order_id, order_date, ship_date, 
DATEDIFF(day, order_date, ship_date) - 2* DATEDIFF(WEEK, order_date, ship_date) as no_of_business_days
from Orders


26) write a query to print 3 columns : category, total_sales and (total sales of returned orders)

select category, sum(sales) as total_sales, sum(case when r.[Order Id] is not null then sales end) as return_order_sales
from Orders o left join returns$ r on o.order_id = r.[Order Id]
group by category


27) write a query to print below 3 columns
category, total_sales_2019(sales in year 2019), total_sales_2020(sales in year 2020)

select category, sum(case when DATEPART(YEAR, order_date)= 2019 then sales end) as total_sales_2019,
sum(case when DATEPART(YEAR, order_date)=2020 then sales end)as total_sales_2020
from Orders
group by category


28) write a query print top 5 cities in west region by average no of days between order date and ship date.

select top 5 city, Avg(DATEDIFF(DAY, order_date, ship_date)) as avg_days
from Orders where region = 'West'
group by city
order by avg_days desc


29) write a query to print first name and last name of a customer using orders table(everything after first space can be considered as last name)
customer_name, first_name,last_name

select customer_name , trim(SUBSTRING(customer_name,1,CHARINDEX(' ',customer_name))) as first_name
, SUBSTRING(customer_name,CHARINDEX(' ',customer_name)+1,len(customer_name)-CHARINDEX(' ',customer_name)+1) as second_name
from Orders


30) write a query to print customer name and no of occurence of character 'n' in the customer name.
customer_name , count_of_occurence_of_n

select customer_name, len(customer_name) - Len(REPLACE(lower(customer_name), 'n', '')) as new
from Orders


31) write a query to print below output from orders data. example output
hierarchy type,hierarchy name ,total_sales_in_west_region,total_sales_in_east_region
category , Technology, ,
category, Furniture, ,
category, Office Supplies, ,
sub_category, Art , ,
sub_category, Furnishings, ,
--and so on all the category ,subcategory and ship_mode hierarchies 


select 'category' as heirarchy_type, category as heirarchy_name, 
sum(case when region = 'West' then sales end) as total_sales_west_region,
sum(case when region = 'East' then sales end) as total_sales_east_region
from Orders
group by category
Union all
select 'sub_category' as heirarchy_type, sub_category as heirarchy_name,
sum(case when region = 'West' then sales end) as total_sales_west_region,
sum(case when region = 'East' then sales end) as total_sales_east_region
from Orders
group by sub_category
union all
select 'ship_mode'as heirarchy_type, ship_mode as heirarchy_name,
sum(case when region = 'West' then sales end) as total_sales_west_region,
sum(case when region = 'East' then sales end) as total_sales_east_region
from Orders
group by ship_mode




32) the first 2 characters of order_id represents the country of order placed . write a query to print total no of orders placed in each country
(an order can have 2 rows in the data when more than 1 item was purchased in the order but it should be considered as 1 order)


select SUBSTRING(order_id,1,2) , count(distinct order_id)as country from Orders
group by SUBSTRING(order_id,1,2)



33) Find the average order value.


select avg(order_sales) from 
(select order_id, sum(sales) as order_sales 
from Orders 
group by order_id) as orders_agg



34) To find all the orders whose sales is greater that avg order value.


select order_id from Orders group by order_id having sum(sales) >
(select avg(order_sales) as avg_order_value from 
(select order_id, sum(sales) as order_sales 
from Orders 
group by order_id) as orders_agg)

Or we can 


select A.*, B.*
from
(select order_id, sum(sales) as order_sales
from Orders
group by order_id) A
inner join
(Select avg(orders_aggregated.order_sales) as avg_order_value from
(select order_id, sum(sales) as order_sales
from Orders
group by order_id) as orders_aggregated) B
on 1=1 where order_sales > avg_order_value



or we can use CTE


With order_wise_sales as
(select order_id, sum(sales) as order_sales from Orders group by order_id)

,B as (select avg(orders_aggregated.order_sales) as avg_order_value from order_wise_sales as orders_aggregated)

select A.*, B.*
from
order_wise_sales A
inner join B
on 1 = 1
where order_sales > avg_order_value



35) write a query to find premium customers from orders data. 
Premium customers are those who have done more orders than average no of orders per customer.


with avg_no_of_orders as (
select customer_id , count(distinct order_id) as no_of_orders from Orders
group by customer_id
)
select * from avg_no_of_orders where no_of_orders> (select avg(no_of_orders) from avg_no_of_orders)



36) write a query to print product id and total sales of highest selling products (by no of units sold) in each category

with product_quantity as (
select category,product_id,sum(quantity) as total_quantity
from Orders 
group by category,product_id)
,cat_max_quantity as (
select category,max(total_quantity) as max_quantity from product_quantity 
group by category
)
select *
from product_quantity pq
inner join cat_max_quantity cmq on pq.category=cmq.category
where pq.total_quantity  = cmq.max_quantity




37) Find Category wise top 5 selling products

with category_prod_sales as 
(
select category, product_id, sum(sales) as category_sales
from Orders
group by category, product_id 
)
, rank_sales as (
select * , ROW_NUMBER() over (partition by category order by category_sales desc) as rn
from category_prod_sales
)
select * from rank_sales where rn<=5

or we can

with cte as 
(
select category, product_id, rank() over (partition by category order by sum(sales) desc) as rn
from Orders
group by category, product_id )
select * from cte where rn <=5



38)  write a query to find top 3 and bottom 3 products by sales in each region

with region_sales as (
select region,product_id,sum(sales) as sales
from orders
group by region,product_id
)
,rnk as (select *, rank() over(partition by region order by sales desc) as drn
, rank() over(partition by region order by sales asc) as arn
from region_sales
)
select region,product_id,sales,case when drn <=3 then 'Top 3' else 'Bottom 3' end as top_bottom
from rnk
where drn <=3 or arn<=3


------------To Understand -------------------

with prod_sales as 
(
select region, product_id, sum (sales) as total_sales from Orders group by region, product_id
)
, new_cte as 
(
select *, rank() over (partition by region order by total_sales desc) as rnk,
rank() over (partition by region order by total_sales asc) as arnk
from prod_sales
)
select * , case when rnk <=3 then 'top3' else 'Bottom3' end as top_bottom from new_cte where rnk <=3 or arnk <=3 



39 ) write a query to print top 3 products in each category by year over year sales growth in year 2020.

with cat_sales as (
select category,product_id,datepart(year,order_date) as order_year, sum(sales) as sales
from Orders
group by category,product_id,datepart(year,order_date)
)
, prev_year_sales as (select *,lag(sales) over(partition by category order by order_year) as prev_year_sales
from cat_sales)
,rnk as (
select   * ,rank() over(partition by category order by (sales-prev_year_sales)/prev_year_sales desc) as rn
from prev_year_sales
where order_year='2020'
)
select * from rnk where rn<=3

